join_rate_data <- summary_rates %>%
inner_join(data, by = c("Feature" = "ID"))
View(join_rate_data)
join_rate_data <- summary_rates %>%
inner_join(data, by = c("Feature" = "ID")) %>%
group_by(Feature)
View(join_rate_data)
join_rate_data <- summary_rates %>%
left_join(data, by = c("Feature" = "ID"))
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID"))
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
group_by(Feature) %>%
mutate(Present = sum(value), Percent_Missing = sum(is.na(value))/length(value))
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable)
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable) %>%
group_by(Feature) %>%
mutate(Present = sum(value), Percent_Missing = sum(is.na(value))/length(value))
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable) %>%
distinct() %>%
mutate(Present = sum(value), Percent_Missing = sum(is.na(value))/length(value))
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable) %>%
mutate(Present = sum(value), Percent_Missing = sum(is.na(value))/length(value)) %>%
distinct() %>%
# Create a dataframe with summaries of the results
stats <- data.frame(
Feature = features,
Description = description,
Function = Function,
Level = Level,
PoS = PoS,
Values = sapply(features, function(f) length(na.exclude(data[data$ID == f, 'value']))), # Number of data points (non-missing data)
Present = sapply(features, function(f) sum(na.exclude(data[data$ID == f, 'value']))), # Number of 1's
Proportion_present = sapply(features, function(f) round(sum(na.exclude(data[data$ID == f, 'value']))/length(na.exclude(data[data$ID == f, 'value'])), digits = 2)), # Proportion of 1's
Proportion_missing = sapply(features, function(f) round(sum(is.na(data[data$ID == f, 'value']))/length(is.na(data[data$ID == f, 'value'])), digits = 2)), # Proportion of NA's
Median_D = sapply(features, function(f) round(median(df_d[df_d$Feature == f, 'D']), digits = 2)),
SD_D = sapply(features, function(f) round(sd(df_d[df_d$Feature == f, 'D']), digits = 2)),
Min_D = sapply(features, function(f) round(min(df_d[df_d$Feature == f, 'D']), digits = 2)),
Max_D = sapply(features, function(f) round(max(df_d[df_d$Feature == f, 'D']), digits = 2)),
LogLikelihood_rates = sapply(features, function(f) round(mean(df_rates[df_rates$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_rates = round(sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'AICc']), digits = 2))),
Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q10'], na.rm = TRUE), digits = 2)),
SD_rate_q10 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q10']), digits = 2)),
Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
SD_rate_q01 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q01']), digits = 2)),
Min_rate_q10 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Min_rate_q01 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
Max_rate_q10 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Max_rate_q01 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
LogLikelihood_states = sapply(features, function(f) round(mean(df_states[df_states$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_states = round(sapply(features, function(f) round(median(df_states[df_states$Feature == f, 'AICc']), digits = 2))),
p1_turkic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Turkic", 'p1']), digits = 2)),
p1_mongolic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Mongolic", 'p1']), digits = 2)),
p1_tungusic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Tungusic", 'p1']), digits = 2)),
p1_koreanic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Koreanic", 'p1']), digits = 2)),
p1_japonic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Japonic", 'p1']), digits = 2)),
Log10_Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q10'], na.rm = TRUE), digits = 2)),
Median_rate_ER = sapply(features, function(f) round(median(df_rates_er[df_rates_er$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_ER = sapply(features, function(f) round(median(df_rates_er[df_rates_er$Feature == f, 'Log10_rate'], na.rm = TRUE), digits = 2))
)
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable) %>%
mutate(Present = sum(value), Percent_Missing = sum(is.na(value))/length(value)) %>%
distinct()
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable) %>%
mutate(Present = sum(value), Percent_Missing = sum(is.na(value))/length(value))
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable) %>%
mutate(Percent_Missing = sum(is.na(value))/length(value)) %>%
count(Present = sum(value))
View(join_rate_data)
join_rate_data <- summary_rates %>%
right_join(data, by = c("Feature" = "ID")) %>%
select(-variable) %>%
mutate(Percent_Missing = sum(is.na(value))/length(value))
View(join_rate_data)
summary_data <- data %>%
group_by(feature)
summary_data <- data %>%
group_by(Feature)
summary_data <- data %>%
group_by(ID)
View(summary_data)
summary_data <- data %>%
count(Present = value)
summary_data <- data %>%
group_by(ID) %>%
count(Present = value)
summary_data <- data %>%
group_by(ID) %>%
count(Present = value, Missing = is.na(value))
summary_data <- data %>%
group_by(ID) %>%
count(Present = value, Missing = sum(is.na(value)))
summary_data <- data %>%
group_by(ID) %>%
count(Present = value, Missing = sum(is.na(value))/length(value))
summary_data <- data %>%
group_by(ID) %>%
count(Present = value)
summary_data <- data %>%
group_by(ID) %>%
count()
summary_data <- data %>%
group_by(ID) %>%
mutate(Missing = sum(is.na(value))/length(value))
summary_data <- data %>%
select(-variable) %>%
group_by(ID) %>%
mutate(Missing = sum(is.na(value))/length(value))
summary_data <- data %>%
select(-variable) %>%
group_by(ID)
# Create a dataframe with summaries of the results
stats <- data.frame(
Feature = features,
Description = description,
Function = Function,
Level = Level,
PoS = PoS,
Values = sapply(features, function(f) length(na.exclude(data[data$ID == f, 'value']))), # Number of data points (non-missing data)
Present = sapply(features, function(f) sum(na.exclude(data[data$ID == f, 'value']))), # Number of 1's
Proportion_present = sapply(features, function(f) round(sum(na.exclude(data[data$ID == f, 'value']))/length(na.exclude(data[data$ID == f, 'value'])), digits = 2)), # Proportion of 1's
Proportion_missing = sapply(features, function(f) round(sum(is.na(data[data$ID == f, 'value']))/length(is.na(data[data$ID == f, 'value'])), digits = 2)), # Proportion of NA's
Median_D = sapply(features, function(f) round(median(df_d[df_d$Feature == f, 'D']), digits = 2)),
SD_D = sapply(features, function(f) round(sd(df_d[df_d$Feature == f, 'D']), digits = 2)),
Min_D = sapply(features, function(f) round(min(df_d[df_d$Feature == f, 'D']), digits = 2)),
Max_D = sapply(features, function(f) round(max(df_d[df_d$Feature == f, 'D']), digits = 2)),
LogLikelihood_rates = sapply(features, function(f) round(mean(df_rates[df_rates$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_rates = round(sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'AICc']), digits = 2))),
Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q10'], na.rm = TRUE), digits = 2)),
SD_rate_q10 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q10']), digits = 2)),
Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
SD_rate_q01 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q01']), digits = 2)),
Min_rate_q10 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Min_rate_q01 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
Max_rate_q10 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Max_rate_q01 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
LogLikelihood_states = sapply(features, function(f) round(mean(df_states[df_states$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_states = round(sapply(features, function(f) round(median(df_states[df_states$Feature == f, 'AICc']), digits = 2))),
p1_turkic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Turkic", 'p1']), digits = 2)),
p1_mongolic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Mongolic", 'p1']), digits = 2)),
p1_tungusic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Tungusic", 'p1']), digits = 2)),
p1_koreanic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Koreanic", 'p1']), digits = 2)),
p1_japonic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Japonic", 'p1']), digits = 2)),
Log10_Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q10'], na.rm = TRUE), digits = 2)),
Median_rate_ER = sapply(features, function(f) round(median(df_rates_er[df_rates_er$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_ER = sapply(features, function(f) round(median(df_rates_er[df_rates_er$Feature == f, 'Log10_rate'], na.rm = TRUE), digits = 2))
)
View(df_rates)
View(df_rates)
round(median(df_rates[df_rates$Feature == "GB020", 'AICc']), digits = 2))
round(median(df_rates[df_rates$Feature == "GB020", 'AICc']), digits = 2)
round(median(df_rates[df_rates$Feature == "GB020", 'AICc']), digits = 2))
round(median(df_rates[df_rates$Feature == "GB020", 'AICc']), digits = 2)
median(df_rates[df_rates$Feature == "GB020", 'AICc'])
df_rates[df_rates$Feature == "GB020", 'AICc']
# load rate results
df_rates <- read.csv('results_asr_rates.csv', header=TRUE)
write.csv(df_rates, 'results_asr_rates.csv', quote=FALSE, row.names=FALSE)
write.csv(df_states, 'results_asr_states.csv', quote=FALSE, row.names=FALSE)
# load rate results
df_rates <- read.csv('results_asr_rates.csv', header=TRUE)
df_rates <- df_rates[df_rates$Model == 'ARD', ]
df_rates$Log10_q01 <- log10(df_rates$q01)
df_rates$Log10_q10 <- log10(df_rates$q10)
# load states results
df_states <- read.csv('results_asr_states.csv', header = TRUE)
df_states <- df_states[df_states$Model == 'ARD', ]
length(unique(df_rates$Feature)) # 171
length(unique(df_states$Feature)) # 171
length(unique(df_d$Feature)) # 171
length(unique(df_states$Feature)) # 171
length(unique(data$ID)) # 231, 223 - after removing features to ignore
length(constant_features) # 11
# Create a dataframe with summaries of the results
stats <- data.frame(
Feature = features,
Description = description,
Function = Function,
Level = Level,
PoS = PoS,
Values = sapply(features, function(f) length(na.exclude(data[data$ID == f, 'value']))), # Number of data points (non-missing data)
Present = sapply(features, function(f) sum(na.exclude(data[data$ID == f, 'value']))), # Number of 1's
Proportion_present = sapply(features, function(f) round(sum(na.exclude(data[data$ID == f, 'value']))/length(na.exclude(data[data$ID == f, 'value'])), digits = 2)), # Proportion of 1's
Proportion_missing = sapply(features, function(f) round(sum(is.na(data[data$ID == f, 'value']))/length(is.na(data[data$ID == f, 'value'])), digits = 2)), # Proportion of NA's
Median_D = sapply(features, function(f) round(median(df_d[df_d$Feature == f, 'D']), digits = 2)),
SD_D = sapply(features, function(f) round(sd(df_d[df_d$Feature == f, 'D']), digits = 2)),
Min_D = sapply(features, function(f) round(min(df_d[df_d$Feature == f, 'D']), digits = 2)),
Max_D = sapply(features, function(f) round(max(df_d[df_d$Feature == f, 'D']), digits = 2)),
LogLikelihood_rates = sapply(features, function(f) round(mean(df_rates[df_rates$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_rates = round(sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'AICc']), digits = 2))),
Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q10'], na.rm = TRUE), digits = 2)),
SD_rate_q10 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q10']), digits = 2)),
Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
SD_rate_q01 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q01']), digits = 2)),
Min_rate_q10 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Min_rate_q01 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
Max_rate_q10 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Max_rate_q01 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
LogLikelihood_states = sapply(features, function(f) round(mean(df_states[df_states$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_states = round(sapply(features, function(f) round(median(df_states[df_states$Feature == f, 'AICc']), digits = 2))),
p1_turkic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Turkic", 'p1']), digits = 2)),
p1_mongolic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Mongolic", 'p1']), digits = 2)),
p1_tungusic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Tungusic", 'p1']), digits = 2)),
p1_koreanic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Koreanic", 'p1']), digits = 2)),
p1_japonic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Japonic", 'p1']), digits = 2)),
Log10_Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q10'], na.rm = TRUE), digits = 2)),
Median_rate_ER = sapply(features, function(f) round(median(df_rates_er[df_rates_er$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_ER = sapply(features, function(f) round(median(df_rates_er[df_rates_er$Feature == f, 'Log10_rate'], na.rm = TRUE), digits = 2))
)
# Create a dataframe with summaries of the results
stats <- data.frame(
Feature = features,
Description = description,
Function = Function,
Level = Level,
PoS = PoS,
Values = sapply(features, function(f) length(na.exclude(data[data$ID == f, 'value']))), # Number of data points (non-missing data)
Present = sapply(features, function(f) sum(na.exclude(data[data$ID == f, 'value']))), # Number of 1's
Proportion_present = sapply(features, function(f) round(sum(na.exclude(data[data$ID == f, 'value']))/length(na.exclude(data[data$ID == f, 'value'])), digits = 2)), # Proportion of 1's
Proportion_missing = sapply(features, function(f) round(sum(is.na(data[data$ID == f, 'value']))/length(is.na(data[data$ID == f, 'value'])), digits = 2)), # Proportion of NA's
Median_D = sapply(features, function(f) round(median(df_d[df_d$Feature == f, 'D']), digits = 2)),
SD_D = sapply(features, function(f) round(sd(df_d[df_d$Feature == f, 'D']), digits = 2)),
Min_D = sapply(features, function(f) round(min(df_d[df_d$Feature == f, 'D']), digits = 2)),
Max_D = sapply(features, function(f) round(max(df_d[df_d$Feature == f, 'D']), digits = 2)),
LogLikelihood_rates = sapply(features, function(f) round(mean(df_rates[df_rates$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_rates = round(sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'AICc']), digits = 2))),
Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q10'], na.rm = TRUE), digits = 2)),
SD_rate_q10 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q10']), digits = 2)),
Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
SD_rate_q01 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q01']), digits = 2)),
Min_rate_q10 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Min_rate_q01 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
Max_rate_q10 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Max_rate_q01 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
LogLikelihood_states = sapply(features, function(f) round(mean(df_states[df_states$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_states = round(sapply(features, function(f) round(median(df_states[df_states$Feature == f, 'AICc']), digits = 2))),
p1_turkic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Turkic", 'p1']), digits = 2)),
p1_mongolic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Mongolic", 'p1']), digits = 2)),
p1_tungusic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Tungusic", 'p1']), digits = 2)),
p1_koreanic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Koreanic", 'p1']), digits = 2)),
p1_japonic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Japonic", 'p1']), digits = 2)),
Log10_Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q10'], na.rm = TRUE), digits = 2))
)
# Set theme_classic() as default for all plots
theme_set(theme_classic())
h1 <- ggplot(df_d, aes(x = D)) +
geom_histogram(binwidth = 3) +
xlab('D')
h2 <- ggplot(df_rates, aes(x = Log10_q01)) +
geom_histogram(binwidth = 1) +
xlab('Rate of feature gain (0 -> 1)')
h3 <- ggplot(df_rates, aes(x = Log10_q10)) +
geom_histogram(binwidth = 1) +
xlab('Rate of feature loss (1 -> 0)')
ggsave("histograms.pdf", (h1 | h2 | h3), height=5, width=12)
View(df_rates)
h3 <- ggplot(df_rates, aes(x = Log10_q10)) +
geom_histogram(binwidth = 1) +
xlab('Rate of feature loss (1 -> 0)')
ggsave("histograms.pdf", (h1 | h2 | h3), height=5, width=12)
library(reshape) # for melt()
library(ggplot2) # for plots, incl. histograms
library(ggridges) # for ridgeplot
library(patchwork) # for saving multiple plots in one file
library(tidyverse) # for data restructuring
library(readr)
ggsave("histograms.pdf", (h1 | h2 | h3), height=5, width=12)
# what is the relationship between the median _D_ score and the number of present characters
present <- ggplot(stats, aes(x = Present, y = Median_D, color = Values)) +
geom_point() +
ggtitle("Median D score and number of 1's") +
scale_color_gradient('Amount of Data', low = "tomato", high = "steelblue") +
theme_classic()
ggsave('scatter_Present_vs_Median_D.pdf', present)
# what is the relationship between the median _D_ score and the amount of missing data?
missing_d <- ggplot(stats, aes(x = Proportion_missing, y = Median_D, color = Values)) +
geom_point() +
ggtitle("Median D score and amount of NA's") +
xlab('Proportion missing') +
ylab('Median D rate') +
scale_color_gradient('Amount of Data', low = "tomato", high = "steelblue") +
theme_classic()
missing_d
ggsave('scatter_Missing_vs_Median_D.pdf', missing_d)
# what is the relationship between the median rate of loss score and the amount of missing data?
missing_q10 <- ggplot(stats, aes(x = Proportion_missing, y = Median_rate_q10, color = Values)) +
geom_point() +
ggtitle("Median rate of feature loss and amount of NA's") +
xlab('Proportion missing') +
ylab('Median rate of feature loss') +
scale_color_gradient('Amount of Data', low = "tomato", high = "steelblue") +
theme_classic()
missing_q10
ggsave('scatter_Missing_vs_Median_q10.pdf', missing_q10)
# what is the relationship between the median rate of gain score and the amount of missing data?
missing_q01 <- ggplot(stats, aes(x = Proportion_missing, y = Median_rate_q01, color = Values)) +
geom_point() +
ggtitle("Median rate of feature gain and amount of NA's") +
xlab('Proportion missing') +
ylab('Median rate of feature gain') +
scale_color_gradient('Amount of Data', low = "tomato", high = "steelblue") +
theme_classic()
missing_q01
ggsave('scatter_Missing_vs_Median_q01.pdf', missing_q10)
ggsave("missing_data.pdf", (missing_d | missing_q01 | missing_q10), height=5, width=15)
cor_d_missing <-cor.test(stats$Proportion_missing, stats$Median_D, method="kendall")
cor_d_missing # 0.06
cor_q01_missing <-cor.test(stats$Proportion_missing, stats$Median_rate_q01, method="kendall")
cor_q01_missing # 0.23
cor_q10_missing <-cor.test(stats$Proportion_missing, stats$Median_rate_q10, method="kendall")
cor_q10_missing # 0.49
length(unique(data$ID)) # 231
# load rate results
df_rates <- read.csv('results_asr_rates.csv', header=TRUE)
df_rates <- df_rates[df_rates$Model == 'ARD', ]
df_rates$Log10_q01 <- log10(df_rates$q01)
df_rates$Log10_q10 <- log10(df_rates$q10)
# load states results
df_states <- read.csv('results_asr_states.csv', header = TRUE)
df_states <- df_states[df_states$Model == 'ARD', ]
# Create a dataframe with summaries of the results
stats <- data.frame(
Feature = features,
Description = description,
Function = Function,
Level = Level,
PoS = PoS,
Values = sapply(features, function(f) length(na.exclude(data[data$ID == f, 'value']))), # Number of data points (non-missing data)
Present = sapply(features, function(f) sum(na.exclude(data[data$ID == f, 'value']))), # Number of 1's
Proportion_present = sapply(features, function(f) round(sum(na.exclude(data[data$ID == f, 'value']))/length(na.exclude(data[data$ID == f, 'value'])), digits = 2)), # Proportion of 1's
Proportion_missing = sapply(features, function(f) round(sum(is.na(data[data$ID == f, 'value']))/length(is.na(data[data$ID == f, 'value'])), digits = 2)), # Proportion of NA's
Median_D = sapply(features, function(f) round(median(df_d[df_d$Feature == f, 'D']), digits = 2)),
SD_D = sapply(features, function(f) round(sd(df_d[df_d$Feature == f, 'D']), digits = 2)),
Min_D = sapply(features, function(f) round(min(df_d[df_d$Feature == f, 'D']), digits = 2)),
Max_D = sapply(features, function(f) round(max(df_d[df_d$Feature == f, 'D']), digits = 2)),
LogLikelihood_rates = sapply(features, function(f) round(mean(df_rates[df_rates$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_rates = round(sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'AICc']), digits = 2))),
Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q10'], na.rm = TRUE), digits = 2)),
SD_rate_q10 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q10']), digits = 2)),
Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'q01'], na.rm = TRUE), digits = 2)),
SD_rate_q01 = sapply(features, function(f) round(sd(df_rates[df_rates$Feature == f, 'q01']), digits = 2)),
Min_rate_q10 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Min_rate_q01 = sapply(features, function(f) round(min(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
Max_rate_q10 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q10'], na.rm=TRUE), digits = 2)),
Max_rate_q01 = sapply(features, function(f) round(max(df_rates[df_rates$Feature == f, 'q01'], na.rm=TRUE), digits = 2)),
LogLikelihood_states = sapply(features, function(f) round(mean(df_states[df_states$Feature == f, 'LogLikelihood']), digits = 2)),
AICc_states = round(sapply(features, function(f) round(median(df_states[df_states$Feature == f, 'AICc']), digits = 2))),
p1_turkic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Turkic", 'p1']), digits = 2)),
p1_mongolic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Mongolic", 'p1']), digits = 2)),
p1_tungusic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Tungusic", 'p1']), digits = 2)),
p1_koreanic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Koreanic", 'p1']), digits = 2)),
p1_japonic = sapply(features, function(f) round(mean(df_states[df_states$Feature == f & df_states$Clade == "Japonic", 'p1']), digits = 2)),
Log10_Median_rate_q01 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q01'], na.rm = TRUE), digits = 2)),
Log10_Median_rate_q10 = sapply(features, function(f) round(median(df_rates[df_rates$Feature == f, 'Log10_q10'], na.rm = TRUE), digits = 2))
)
# Check if there are uninformative features with all absent
stats[stats$Present==0,]
# Check if there are cases with missing values
stats[!complete.cases(stats),]
# Set theme_classic() as default for all plots
theme_set(theme_classic())
# what is the relationship between the median rate of loss score and the amount of missing data?
missing_q10 <- ggplot(stats, aes(x = Proportion_missing, y = Median_rate_q10, color = Values)) +
geom_point() +
ggtitle("Median rate of feature loss and amount of NA's") +
xlab('Proportion missing') +
ylab('Median rate of feature loss') +
scale_color_gradient('Amount of Data', low = "tomato", high = "steelblue") +
theme_classic()
missing_q10
ggsave('scatter_Missing_vs_Median_q10.pdf', missing_q10)
# what is the relationship between the median rate of gain score and the amount of missing data?
missing_q01 <- ggplot(stats, aes(x = Proportion_missing, y = Median_rate_q01, color = Values)) +
geom_point() +
ggtitle("Median rate of feature gain and amount of NA's") +
xlab('Proportion missing') +
ylab('Median rate of feature gain') +
scale_color_gradient('Amount of Data', low = "tomato", high = "steelblue") +
theme_classic()
missing_q01
ggsave('scatter_Missing_vs_Median_q01.pdf', missing_q10)
ggsave("missing_data.pdf", (missing_d | missing_q01 | missing_q10), height=5, width=15)
cor_d_missing <-cor.test(stats$Proportion_missing, stats$Median_D, method="kendall")
cor_d_missing # 0.06
cor_q01_missing <-cor.test(stats$Proportion_missing, stats$Median_rate_q01, method="kendall")
cor_q01_missing # 0.23
cor_q10_missing <-cor.test(stats$Proportion_missing, stats$Median_rate_q10, method="kendall")
cor_q10_missing # 0.49
cor_ER_missing <-cor.test(stats$Proportion_missing, stats$Median_rate_ER, method="kendall")
# How many features could I code for less than 50% of languages? -> 9 features, or 5 %
stats %>%
count(Proportion_missing < 0.5) %>%
mutate(Percentage = n/sum(n))
stats %>%
count(Proportion_missing < 0.3) %>%
mutate(Percentage = n/sum(n))
stats_missing_less_fifty <- stats %>%
filter(Proportion_missing < 0.5)
# Parallel boxplots for function and rate
b1 <- ggplot(stats, aes(x = Function, y = Log10_Median_rate_q01)) +
geom_boxplot() +
geom_hline(yintercept=0, col="red") +
ylab('Transition from 0 to 1, feature gain') +
theme(axis.text.x = element_blank(),axis.title.x = element_blank(), axis.ticks.x = element_blank())
b1
b2 <- ggplot(stats, aes(x = Function, y = Log10_Median_rate_q10)) +
geom_boxplot() +
geom_hline(yintercept=0, col="red") +
ylab('Transition from 1 to 0, feature loss') +
theme(axis.text.x = element_blank(),axis.title.x = element_blank(), axis.ticks.x = element_blank())
b3 <- ggplot(stats, aes(x = Function, y = Median_D)) +
geom_boxplot() +
geom_hline(yintercept=0.5, col="red") +
xlab('Function') +
ylab('Phylogenetic signal (D)') +
theme(axis.text.x = element_text(angle = 90,hjust=1), axis.ticks.x = element_blank())
ggsave("boxplots-function.pdf", b1  /  b2 / b3,height=10,width=7)
# Parallel boxplots for level and rate
b4 <- ggplot(stats, aes(x = Level, y = Log10_Median_rate_q01)) +
geom_boxplot() +
geom_hline(yintercept=0, col="red") +
ylab('Transition from 0 to 1, feature gain') +
theme(axis.text.x = element_blank(),axis.title.x = element_blank(), axis.ticks.x = element_blank())
b5 <- ggplot(stats, aes(x = Level, y = Log10_Median_rate_q10)) +
geom_boxplot() +
geom_hline(yintercept=0, col="red") +
ylab('Transition from 1 to 0, feature loss') +
theme(axis.text.x = element_blank(),axis.title.x = element_blank(), axis.ticks.x = element_blank())
b6 <- ggplot(stats, aes(x = Level, y = Median_D)) +
geom_boxplot() +
geom_hline(yintercept=0.5, col="red") +
xlab('Level') +
ylab('Phylogenetic signal (D)') +
theme(axis.text.x = element_text(angle = 90,hjust=0.95,vjust=0.2), axis.ticks.x = element_blank())
ggsave("boxplots-level.pdf", b4  /  b5 / b6 ,height=10,width=7)
b7 <- ggplot(stats, aes(x = PoS, y = Log10_Median_rate_q01)) +
geom_boxplot() +
geom_hline(yintercept=0, col="red") +
ylab('Transition from 0 to 1, feature gain') +
theme(axis.text.x = element_blank(),axis.title.x = element_blank(), axis.ticks.x = element_blank())
b8 <- ggplot(stats, aes(x = PoS, y = Log10_Median_rate_q10)) +
geom_boxplot() +
geom_hline(yintercept=0, col="red") +
ylab('Transition from 1 to 0, feature loss') +
theme(axis.text.x = element_blank(),axis.title.x = element_blank(), axis.ticks.x = element_blank())
b9 <- ggplot(stats, aes(x = PoS, y = Median_D)) +
geom_boxplot() +
geom_hline(yintercept=0.5, col="red") +
xlab('Part of speech') +
ylab('Phylogenetic signal (D)') +
theme(axis.text.x = element_text(angle = 90,hjust=0.95,vjust=0.2), axis.ticks.x = element_blank())
ggsave("boxplots-pos.pdf", b7 / b8 / b9, height = 10, width = 7)
df_d_feature_short <- df_d %>%
inner_join(categories,by=c("Feature"="ID")) %>%
select(Tree, Feature_short, D, PVal1, PVal0)
p_d <- ggplot(df_d_feature_short, aes(x = D, y = reorder(Feature_short, D), fill=..x..)) +
geom_density_ridges_gradient(rel_min_height=0.01, scale=2) +
scale_fill_gradient(low="orange", high="blue") +
theme(axis.title.y=element_blank()) +
geom_vline(xintercept=0) +
geom_vline(xintercept=1) +
xlim(-5, 5) +
guides(fill="none")
ggsave('ridgeplot-D.pdf', height=20, width=10)
# delete rows with infinite values (intrudoced through log10 transformation)
df_rates <- df_rates[!df_rates$Log10_q01==(-Inf),]
df_rates <- df_rates[!df_rates$Log10_q10==(-Inf),]
df_rates_feature_short <- df_rates %>%
inner_join(categories,by=c("Feature"="ID")) %>%
select(Tree, Feature_short, q01, q10, Log10_q01, Log10_q10)
p_rate_01 <- ggplot(df_rates_feature_short, aes(x = Log10_q01, y = reorder(Feature_short, Log10_q01), fill=..x..)) +
geom_density_ridges_gradient(rel_min_height=0.01, scale = 2) +
theme(axis.title.y = element_blank()) +
scale_fill_gradient(low="orange", high="blue") +
geom_vline(xintercept=0) +
guides(fill="none") +
xlab("Log10 0-1 transition rate (feature gain")
ggsave('ridgeplot-q01.pdf', height=20, width=10)
p_rate_10 <- ggplot(df_rates_feature_short, aes(x = Log10_q10, y = reorder(Feature_short, Log10_q10), fill=..x..)) +
geom_density_ridges_gradient(rel_min_height=0.01, scale=2) +
theme(axis.title.y = element_blank()) +
scale_fill_gradient(low="orange", high="blue") +
geom_vline(xintercept=0) +
guides(fill="none") +
xlab("1-0 transition rate (feature loss)")
ggsave('ridgeplot-q10.pdf', height=20, width=10)
